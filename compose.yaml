services:

  rabbitmq:
    image: rabbitmq:3-management
    restart: unless-stopped
    hostname: rabbitmq
    expose:
      - 5672
      - 15672
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      start_period: 30s
      start_interval: 5s

  minio:
    # https://min.io/docs/minio/container/index.html
    image: bitnami/minio:latest
    restart: unless-stopped
    healthcheck:
      test: curl --fail http://minio:9001/ || exit 1
      start_period: 30s
      start_interval: 5s
    environment:
      MINIO_ROOT_USER: root
      MINIO_ROOT_PASSWORD: root1234
    volumes:
      - minio-data:/bitnami/minio/data

  minio-client:
    image: bitnami/minio-client:latest
    depends_on:
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    entrypoint: [""]
    command:  /bin/bash -c "
              mc config host add local http://minio:9000 root root1234;
              mc admin config set local notify_amqp:data url=amqp://guest:guest@rabbitmq:5672 
                exchange=minio-events exchange_type=direct routing_key=data durable=true;
              mc admin config set local notify_amqp:model url=amqp://guest:guest@rabbitmq:5672 
                exchange=minio-events exchange_type=direct routing_key=model durable=true;
              mc admin service restart local;
              
              mc mb local/ml-data --ignore-existing;
              mc mb local/ml-model --ignore-existing;
              mc event add local/ml-data arn:minio:sqs::data:amqp --ignore-existing --suffix .csv --event put;
              mc event add local/ml-model arn:minio:sqs::model:amqp --ignore-existing --suffix .txt --event put;
              exit 0; "
    # If AMQP is not working add the following lines to the command after config host:
    # mc admin service restart local;
    # mc ping local --exit --count 10 --interval 2;

  ml-data-scraper:
    build:
      context: .
      dockerfile: docker/ml_data/Dockerfile
    depends_on:
      minio-client:
        condition: service_completed_successfully
    restart: on-failure
    env_file:
      - .env

  ml-training:
    build:
      context: .
      dockerfile: docker/train/Dockerfile
    depends_on:
      minio-client:
        condition: service_completed_successfully
    restart: unless-stopped
    env_file:
      - .env

  ml-predict:
    build:
      context: .
      dockerfile: docker/predict/Dockerfile
    depends_on:
      minio-client:
        condition: service_completed_successfully
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - 50051:50051

volumes:
  minio-data:
  